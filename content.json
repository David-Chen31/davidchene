{"meta":{"title":"DavidChenのBlog","subtitle":"","description":"","author":"David Chen","url":"https://david-chen31.github.io","root":"/davidchene/"},"pages":[{"title":"categories","date":"2025-07-26T12:34:58.000Z","updated":"2025-07-26T13:16:12.352Z","comments":true,"path":"categories/index.html","permalink":"https://david-chen31.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2025-07-26T12:57:26.000Z","updated":"2025-07-26T12:57:26.017Z","comments":true,"path":"about/index.html","permalink":"https://david-chen31.github.io/about/index.html","excerpt":"about","text":""},{"title":"tags","date":"2025-07-26T12:36:16.000Z","updated":"2025-07-28T03:25:12.016Z","comments":true,"path":"tags/index.html","permalink":"https://david-chen31.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"阿里云初体验：从后端到前端","slug":"阿里云初体验：从后端到前端","date":"2025-07-28T03:30:35.000Z","updated":"2025-07-28T08:57:50.458Z","comments":true,"path":"2025/07/28/阿里云初体验：从后端到前端/","permalink":"https://david-chen31.github.io/2025/07/28/%E9%98%BF%E9%87%8C%E4%BA%91%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%9A%E4%BB%8E%E5%90%8E%E7%AB%AF%E5%88%B0%E5%89%8D%E7%AB%AF/","excerpt":"","text":"阿里云初体验：从后端到前端项目缘由​ 最近天挺热，毫不耽误队长安排给我一个用碱基序列查询Part编号及其信息的检索功能任务。这任务看起来很吓人，数据方面可能要用python爬取，上线需要购买域名、云数据库，起初，我准备平静地接受死亡，但在沈阳旅馆单人间的一个晚上，我居然找到了官方提供的xml格式数据（它居然真的直接给你数据库结构和数据），任务难度直降至原来的50%！！ ​ 前天队长来催，遂熬夜搞定。用阿里云产品完成比赛项目，不夸张的说完全是大炮打蚊子，主要我第一次使用阿里云大炮，潜心研究两天才搞懂大炮按钮在哪。炮弹轰出那一刻，嗯，蛮有成就感的呢~ ​ 其中有很多需要注意的点，稍有不慎就会bug连篇。 后端数据库搭建与导入数据库方面我选择了阿里云关系型数据库RDS，数据库类型是MySQL 8.0。 第一次使用的用户可以选择免费试用，试用时长为1个月，完全足够小型测试，试用完成后如果不想续费购买，一定记得在我的试用中释放资源 下面将展示如何把本地sql数据文件导入到云数据库中： 首先进入我们数据库的实例列表，点开对应实例 在账号管理里，会有自动创建的账户，你也可以自己创建一个账户，我这里直接用官方自动创建的账户dms_user_a599f7b 接下来，进入数据库管理，创建数据库，然后点击最右边的SQL查询进入DMS 鼠标移动到左上角，选择数据导入 ​ 选择刚刚创建的数据库，上传文件，提交申请 在工单中选择立即执行 成功后显示如下 此时进行sql查询就能显示上传sql文件里的所有数据了 后端函数计算实现老一套，选择产品函数计算试用资源包，第一次使用的用户可以免费试用3个月，之后不续费的话也是需要释放资源 我们进入函数计算 FC 3.0，点击函数菜单，点击创建函数 下面我使用的是事件函数，http触发器 选择事件函数；函数代码模块选择运行环境（不知怎么，我老是忘选），这里我选择通过ZIP包上传代码(后面有讲如何构建ZIP包)；权限、网络、存储模块开启允许访问VPC，这里选择和数据库一样的VPC，点击左下角创建 进入刚创建好的函数管理页，选择触发器，点击创建触发器，然后类型我选择http，认证方式选择无需认证，因为我的前端是静态，无法通过其他认证 选择好就可以点击确定，这时会显示如下内容 最后设置数据库白名单，保证函数计算能够访问，这里我直接选择全部开发(豪爽) 前端就可以通过触发器的公网网址实现功能啦 构建ZIP包关于如何构建ZIP包的内容，如果你已经掌握，直接跳过这一部分 在本地安装依赖： 1234bash复制编辑mkdir fc-search &amp;&amp; cd fc-searchpip install flask pymysql -t .cp index.py . # 把代码写入index.pyzip -r fc-search.zip . 注意python文件一定命名为index.py，否则无效，原因暂时还没考察 调试&amp;Debug调试函数计算代码官方有测试函数功能，在网页的IDE中修改完代码后需要点击部署代码才会生效，测试函数的请求信息也可以自己更改，实时日志需要购买，我还没有试过 The ‘Access-Control-Allow-Origin’ header contains multiple values遇到该bug时浏览器控制台输出如下： 1practice.html:1 Access to fetch at &#x27;https://func-gigh-sbcycnlqwy.cn-hangzhou.fcapp.run/?q=agagaatataaaaagccagattattaatccggcttttttattattt&#x27; from origin &#x27;http://localhost:52330&#x27; has been blocked by CORS policy: The &#x27;Access-Control-Allow-Origin&#x27; header contains multiple values &#x27;http://localhost:52330, http://localhost:52330&#x27;, but only one is allowed. Have the server send the header with a valid value. 说是Access-Control-Allow-Origin响应表头多于一个，按F12打开网络发现确实有两个响应标头 解决方案：把index.py中所有和Access-Control-Allow-Origin有关的代码删去 原因分析：可能函数计算会自动发送Access-Control-Allow-Origin，我的代码中也会发生，造成多于一个Access-Control-Allow-Origin响应标头","categories":[{"name":"后端","slug":"后端","permalink":"https://david-chen31.github.io/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"云部署","slug":"云部署","permalink":"https://david-chen31.github.io/tags/%E4%BA%91%E9%83%A8%E7%BD%B2/"},{"name":"函数计算","slug":"函数计算","permalink":"https://david-chen31.github.io/tags/%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97/"},{"name":"数据库","slug":"数据库","permalink":"https://david-chen31.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"一篇搞定：Hexo博客快速插入图片","slug":"一篇搞定：Hexo博客快速插入图片","date":"2025-07-28T02:47:04.000Z","updated":"2025-07-28T03:11:01.380Z","comments":true,"path":"2025/07/28/一篇搞定：Hexo博客快速插入图片/","permalink":"https://david-chen31.github.io/2025/07/28/%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9A%EF%BC%9AHexo%E5%8D%9A%E5%AE%A2%E5%BF%AB%E9%80%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/","excerpt":"","text":"一篇搞定：Hexo博客快速插入图片下载插件npm install hexo-renderer-marked命令直接安装 在config.yaml中更改配置如下： 1234post_asset_folder: truemarked: prependRoot: true postAsset: true 修改Typora配置传统方法是先将图片保存到文章资源文件夹中，再从文章资源文件夹中引用图片。但一张一张保存会很麻烦，所以我们利用Typora的粘贴后自动下载功能，简化操作 配置下载路径，填入./$&#123;filename&#125; 这时图片会保存在md文章同目录下的，以该文章名命名的文件夹 格式化图片名配置好后，当我们把图片粘贴过去时，会发现图片路径是：文章名&#x2F;image.png 此时更新博客系统，它是找不到图片的，需要删去文章名，仅保留image.png。（删除后本地打开md文件后，图片是无法正常显示的，放心，该问题将于下一步解决） 快速删除方法：按下Ctrl+F，将 文章名&#x2F; 替换为空，点击 全部 ，即可完成 设置图片根目录此时更新博客系统，能看到图片正常显示了出来，但本地md文件却因为改路径而无法正常显示，影响体验和编辑。下面是修改方法 点击格式–图像–设置图像根目录，选择保存图片的以文章名命名的文件夹，稍稍等待一会或保存重启Typora就能完美展示出来啦 参考(69 封私信 &#x2F; 81 条消息) hexo博客如何插入图片 - 知乎","categories":[{"name":"前端","slug":"前端","permalink":"https://david-chen31.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://david-chen31.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"5min速通：个人博客搭建","slug":"5min速通：个人博客搭建","date":"2025-07-26T15:32:09.000Z","updated":"2025-07-26T15:52:11.310Z","comments":true,"path":"2025/07/26/5min速通：个人博客搭建/","permalink":"https://david-chen31.github.io/2025/07/26/5min%E9%80%9F%E9%80%9A%EF%BC%9A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","excerpt":"","text":"5min速通：个人博客搭建非常好！你想要： ✅ 能修改主题 ✅ 上线运行，不依赖本地环境 那么我强烈推荐你使用 Hexo + GitHub Pages。它功能强、主题丰富、可完全上线部署，无需服务器，甚至不用购买域名也能运行！ 🔧 目录式教程（适合初学者） 👇 步骤分为三部分，确保你能完整地部署一个支持主题修改的 Hexo 博客 ✅ 第一步：准备环境 安装 Node.js：下载地址（推荐 LTS 版本） 安装 Git：Git官网 注册 GitHub 账号：github.com 创建 GitHub 仓库： 仓库名设为任意名字，比如：my-blog 不要勾选 README ✅ 第二步：在本地创建 Hexo 博客1. 安装 Hexo CLI（只需一次）1npm install -g hexo-cli 2. 初始化博客项目123hexo init my-blogcd my-blognpm install 3. 本地预览博客（非上线）1hexo server 访问 http://localhost:4000 可以预览你写的博客。 ✅ 第三步：部署到 GitHub Pages1. 安装部署插件1npm install hexo-deployer-git --save 2. 修改 _config.yml 配置（不是根目录的那个，是项目根目录下的）添加这段（请替换成你自己的 GitHub 仓库）： 1234deploy: type: git repo: https://github.com/你的用户名/你的仓库名.git branch: gh-pages 3. 一键生成并部署123hexo cleanhexo generatehexo deploy 此时会将博客部署到 GitHub 的 gh-pages 分支，你可以在 GitHub 仓库的「Settings」→「Pages」中选择 gh-pages 作为部署分支。 你就可以访问： 1https://你的用户名.github.io/你的仓库名/ 🎨 修改主题Hexo 支持很多漂亮的主题： 官方主题库：https://hexo.io/themes/ 推荐几个常用主题： Butterfly Matery NexT 示例：安装 Butterfly 主题12cd my-bloggit clone https://github.com/jerryc127/hexo-theme-butterfly themes/butterfly 修改 _config.yml： 1theme: butterfly 然后执行： 12hexo cleanhexo g -d 📝 写博客文章在 source/_posts 文件夹中创建 Markdown 文件： 1hexo new &quot;我的第一篇博客&quot; 它会创建一个 .md 文件，你只需编辑内容即可。 ☁️ 进阶上线技巧 可绑定自定义域名（添加 CNAME 文件即可） 支持评论（Waline &#x2F; Gitalk） 支持数学公式 &#x2F; 图表 &#x2F; 标签 &#x2F; 分类 &#x2F; 站点统计","categories":[],"tags":[]},{"title":"Cocos小游戏发布到web教程，看这一篇就够了！","slug":"Cocos小游戏发布到web教程，看这一篇就够了！","date":"2025-07-26T13:05:15.000Z","updated":"2025-07-27T07:03:01.308Z","comments":true,"path":"2025/07/26/Cocos小游戏发布到web教程，看这一篇就够了！/","permalink":"https://david-chen31.github.io/2025/07/26/Cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%8F%91%E5%B8%83%E5%88%B0web%E6%95%99%E7%A8%8B%EF%BC%8C%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86%EF%BC%81/","excerpt":"","text":"Cocos小游戏发布到web教程，看这一篇就够了！ 构建发布构建web-mobile，选择竖屏，点击开始构建 建立仓库打开构建的web桌面端项目文件夹，将文件夹里面所有内容git到新建的仓库，把该仓库的Pages打开 注意： 有时候，git commit无效，但git commit -m “first”可以 仓库不能设置为private，private repository的pages配置需要花钱 如果有脚本加载不出来，可能是脚本文件以下划线开头，可以在仓库根目录下添加 .nojekyll 空文件暴力解决 引用如果想把小游戏放在其他网站上，用ifame嵌入","categories":[{"name":"游戏制作","slug":"游戏制作","permalink":"https://david-chen31.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"}],"tags":[{"name":"cocos","slug":"cocos","permalink":"https://david-chen31.github.io/tags/cocos/"}]},{"title":"开门大吉","slug":"hello-world","date":"2025-07-26T11:50:06.833Z","updated":"2025-07-27T08:35:27.130Z","comments":true,"path":"2025/07/26/hello-world/","permalink":"https://david-chen31.github.io/2025/07/26/hello-world/","excerpt":"","text":"开门大吉总而言之，言而总之，今日，骄阳似火，大卫·陈的Blog开张啦！！！😊","categories":[],"tags":[]}],"categories":[{"name":"后端","slug":"后端","permalink":"https://david-chen31.github.io/categories/%E5%90%8E%E7%AB%AF/"},{"name":"前端","slug":"前端","permalink":"https://david-chen31.github.io/categories/%E5%89%8D%E7%AB%AF/"},{"name":"游戏制作","slug":"游戏制作","permalink":"https://david-chen31.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"}],"tags":[{"name":"云部署","slug":"云部署","permalink":"https://david-chen31.github.io/tags/%E4%BA%91%E9%83%A8%E7%BD%B2/"},{"name":"函数计算","slug":"函数计算","permalink":"https://david-chen31.github.io/tags/%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97/"},{"name":"数据库","slug":"数据库","permalink":"https://david-chen31.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"博客","slug":"博客","permalink":"https://david-chen31.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"cocos","slug":"cocos","permalink":"https://david-chen31.github.io/tags/cocos/"}]}